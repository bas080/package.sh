#!/usr/bin/env bashionista

function parent_find() {
  local file="$1"
  local dir="$2"
  test -e "$dir/$file" && echo "$dir" && return 0
  [ '/' = "$dir" ] && return 1
  "${FUNCNAME[0]}" "$file" "$(dirname "$dir")"
}

function log() {
  echo "[package] $1" 1>&2
}

DIR="$(parent_find 'package.sh' "$PWD")" || {
    log "not able to find package.sh file"
    exit 1
}

cd "$DIR"
mkdir -p '.package'

function noop ()
{
    true
};
function version ()
{
    noop
};
function installed()
{
    noop
};
function linked ()
{
    noop
};
function sourced ()
{
    noop
};
function sourceable ()
{
    noop
};
function executable ()
{
    noop
};
function package ()
{
    noop
};
function package_cat ()
{
    wget -q "$1" -O - || cat "$1"
};
function package_cache ()
{
    local f
    f=".package/$(package_hash "$1")";
    [[ -f "$f" ]] || return 1;
    cat "$f";
};
function template ()
{
    local fn_name;
    printf '%s' "$1"; shift
    printf " '%s'" "$@"
    printf '\n'
};
function package_flatten ()
{
    function package ()
    {
        package_flatten <(package_cat "$1")
    };
    function linked ()
    {
        template "${FUNCNAME[0]}" "$@"
    };
    function sourced ()
    {
        test "$#" -ne 0 || {
          printf $'sourced <<< \'%s\'\n' "$(cat -)"
          return
        }
        template "${FUNCNAME[0]}" "$@"
    };
    function executable ()
    {
        template "${FUNCNAME[0]}" "$@"
    };
    function installed()
    {
        template "${FUNCNAME[0]}" "$@"
    };
    function sourceable ()
    {
        template "${FUNCNAME[0]}" "$@"
    };
    # shellcheck source=./package.sh
    source "$(package_file "$@")"
};
function package_ls ()
{
    package_flatten "$@";
};
function package_install ()
{
    local bin
    function linked ()
    {
        ! test -f "$PWD/.package_install/$1" || return 0
        test "$#" -ne 1 || {
          bin="$(readlink -f "$(which "$1")")"
          ln -s "$bin" "$PWD/.package_install/$1"
          log "linked $bin with alias $1"
          return
        }
        ln -s "$2" "$PWD/.package_install/$1"
        log "linked $2 with alias $1"
    };
    function executable ()
    {
        local file_path=".package_install/$1";
        package_cat "$2" > "$file_path";
        chmod +x "$file_path"
        log "fetched executable $2 with alias $1"
    };
    function sourced ()
    {
        test "$#" -ne 0 || return 0

        package_cat "$1" > ".package_install/$(package_hash "$1")"
        log "fetched sourced $1"
    };
    function sourceable ()
    {
        package_cat "$2" > ".package_install/$1"
        log "fetched sourceable $2 with alias $1"
    };
    function installed ()
    {
        local tmp
        tmp="$(mktemp)"
        package_cat "$1" > "$tmp"
        chmod +x "$tmp"
        "$tmp" || {
            rm "$tmp"
            return 1
        }
        rm "$tmp"
        log "installed $1"
    };
    [[ -e .package_install ]] && rm -r .package_install # Cleanup
    {
        mkdir -p ".package_install";
        package_flatten "$@" | source /dev/stdin || {
            log "reverting to previous install"
            log "aborting install"
            return 1
        };
        log "removing old install"
        rm -r .package
        mv .package_install .package
        log "install was a success"
    } >&2
};
function package_hash ()
{
    local array=($(sha1sum <<< "$1"));
    echo "${array[0]}"
};
function package_sourced ()
{
    function sourced ()
    {
        test "$#" -ne 0 || {
            cat -;
            return
        };
        package_cache "$1"
    };
    mkdir -p ".package";
    echo "export PATH=\".package:$PWD/.package:$PATH\"";
    package_flatten "$@" | source /dev/stdin
};
function package_file ()
{
    echo "${1:-package.sh}"
};
function package_run ()
{
    export PATH=".package"
    $@
}
function package_version ()
{
    local called=0;

    version()
    {
      called=1
      echo "$1"
    };

    source "$(package_file "$@")"
    [[ "$called" -eq 1  ]] || {
      log "version not defined in $DIR/$(package_file "$@")"
      return 1
    }
}
